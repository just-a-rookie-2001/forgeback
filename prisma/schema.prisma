generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  prompt      String
  status      String        @default("idea") // idea, planning, designing, developing, testing, deploying, completed, error
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stages      Stage[] // Add relation to Stage
  chatHistory ChatMessage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum StageType {
  PLANNING
  DESIGN
  DEVELOPMENT
  TESTING
  DEPLOYMENT
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
}

model Stage {
  id         String      @id @default(cuid())
  name       String
  type       StageType
  status     StageStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  artifacts  Artifact[]
}

model Artifact {
  id        String   @id @default(cuid())
  name      String
  content   String
  type      String // e.g., 'documentation', 'code', 'diagram', 'file'
  language  String   @default("javascript") // programming language for code artifacts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stageId   String
  stage     Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String    @id @default(cuid())
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stageType StageType @default(DEVELOPMENT) // Associate message with specific stage
  role      String    // user | assistant | system
  content   String
  createdAt DateTime  @default(now())

  @@index([projectId, stageType])
}
